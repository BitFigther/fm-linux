name: Build and Test

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  BUILD_TYPE: Release

jobs:
  build-and-test:
    strategy:
      matrix:
        os: [ubuntu-latest, ubuntu-20.04]
        compiler: [gcc, clang]
        
    runs-on: ${{ matrix.os }}
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential libssl-dev pkg-config
        
        # Install specific compiler if needed
        if [ "${{ matrix.compiler }}" = "clang" ]; then
          sudo apt-get install -y clang
        fi
        
    - name: Set compiler environment
      run: |
        if [ "${{ matrix.compiler }}" = "clang" ]; then
          echo "CC=clang" >> $GITHUB_ENV
        else
          echo "CC=gcc" >> $GITHUB_ENV
        fi
        
    - name: Show environment info
      run: |
        echo "OS: ${{ matrix.os }}"
        echo "Compiler: ${{ matrix.compiler }}"
        $CC --version
        openssl version
        
    - name: Clean and build
      run: |
        make clean || true
        make CC=$CC
        
    - name: Verify build artifacts
      run: |
        ls -la build/
        file build/fm
        ldd build/fm
        
    - name: Run basic smoke test
      run: |
        build/fm 2>&1 | head -5
        
    - name: Run comprehensive test suite
      run: |
        cd test
        chmod +x test_fm_comprehensive.sh
        ./test_fm_comprehensive.sh
        
    - name: Upload test results on failure
      if: failure()
      uses: actions/upload-artifact@v3
      with:
        name: test-results-${{ matrix.os }}-${{ matrix.compiler }}
        path: |
          /tmp/fm_test_*
          test/*.log
          build/fm
        retention-days: 7
        
  coverage:
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential libssl-dev gcov lcov
        
    - name: Build with coverage
      run: |
        make clean || true
        make CFLAGS="-g -O0 --coverage" LDFLAGS="--coverage"
        
    - name: Run tests with coverage
      run: |
        cd test
        ./test_fm_comprehensive.sh
        
    - name: Generate coverage report
      run: |
        lcov --capture --directory . --output-file coverage.info
        lcov --remove coverage.info '/usr/*' --output-file coverage.info
        lcov --list coverage.info
        
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.info
        flags: unittests
        name: codecov-umbrella